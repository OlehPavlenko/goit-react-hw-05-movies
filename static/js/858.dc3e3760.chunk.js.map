{"version":3,"file":"static/js/858.dc3e3760.chunk.js","mappings":"wNAwDA,UAjDqB,WACjB,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAYC,EAAAA,EAAAA,IAAU,IAAtBD,QACN,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAASO,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAqBA,OAlBAC,EAAAA,EAAAA,YAAU,WACND,EAAUF,EAAAA,EAAAA,UACVI,EAAAA,EAAAA,IAAqBR,GAChBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAAb,IACbF,MAAK,SAAAX,GACFC,EAAWD,GACXQ,EAAUF,EAAAA,EAAAA,UACNN,EAAQc,OAAS,IACjBN,EAAUF,EAAAA,EAAAA,UACVS,MAAM,+BAEb,IACAC,OAAM,SAAAZ,GACHC,EAASD,EAAMa,SACfT,EAAUF,EAAAA,EAAAA,SACb,GACR,GAAE,CAACJ,IAEAK,IAAWD,EAAAA,EAAAA,SACJ,SAAC,IAAD,CAAQY,OAAQC,EAAAA,KAIvBZ,IAAWD,EAAAA,EAAAA,UACNF,EAAMa,QAGXV,IAAWD,EAAAA,EAAAA,UACH,0BACJ,eAAIc,UAAWC,EAAAA,EAAAA,UAAf,SACKrB,EAAQsB,KAAI,SAAAC,GAAM,OACf,gBAAoBH,UAAWC,EAAAA,EAAAA,UAA/B,WACI,qCAAaE,EAAOC,WACpB,qCAAaD,EAAOE,aAFfF,EAAOG,GADD,aAH/B,EAcH,C,uGCvDD,IAAMC,EAAW,+BACXC,EAAU,mCACVC,EAAe,iC,mKCARC,EAAqB,SAAAlB,GAC9B,GAAIA,EAASmB,GACT,OAAOnB,EAASoB,OAGpB,MADAC,QAAQ7B,MAAM,oBAAqBQ,EAASL,QACtC,IAAI2B,MAAM,kCACnB,EACD,SAASC,EAAeC,GACpB,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,qCACgCC,EAAAA,GADhC,gCAC+DQ,EAD/D,yBAEVzB,KAAKmB,EACV,CAED,SAASQ,EAAkBC,EAAQH,GAC/B,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,iCAC4BC,EAAAA,GAD5B,gCAC2DQ,EAD3D,sCAC6FG,IACvG5B,KAAKmB,EACV,CACD,SAASU,EAAqBtC,GAC1B,OAAOmC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACazB,EADb,oBACgC0B,EAAAA,GADhC,oBAEVjB,KAAKmB,EACV,CACD,SAASW,EAAqBvC,GAC1B,OAAOmC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACazB,EADb,4BACwC0B,EAAAA,GADxC,oBAEVjB,KAAKmB,EACV,CACD,SAASpB,EAAqBR,GAC1B,OAAOmC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACazB,EADb,4BACwC0B,EAAAA,GADxC,oBAEVjB,KAAKmB,EACV,C,sDClCM,IAAMxB,EAAgB,CACzBoC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W,oBCHd,KAAgB,UAAY,6BAA6B,UAAY,6B","sources":["components/MoviesDetails/MovieReviews.jsx","services/ApiBaseUrl.jsx","services/ApiServices.jsx","services/loadingStatus.jsx","webpack://react-homework-template/./src/components/MoviesDetails/MovieCast.module.css?6345"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesByReviews } from 'services/ApiServices';\nimport { Loader } from 'components/Loader/Loader';\nimport { loadingStatus } from 'services/loadingStatus';\nimport styles from './MovieCast.module.css'\n\nconst MovieReviews = () => {\n    const [reviews, setReviews] = useState([]);\n    let { movieId } = useParams('');\n    const [error, setError] = useState('');\n    const [status, setStatus] = useState(loadingStatus.IDLE);\n    \n\n    useEffect(() => {\n        setStatus(loadingStatus.PENDING);\n        fetchMoviesByReviews(movieId)\n            .then(response => response.results)\n            .then(reviews => {\n                setReviews(reviews);\n                setStatus(loadingStatus.RESOLVED);\n                if (reviews.length < 1) {\n                    setStatus(loadingStatus.REJECTED);\n                    alert('There are no reviews yet...')\n                }\n            })\n            .catch(error => {\n                setError(error.message);\n                setStatus(loadingStatus.REJECTED);\n            });\n    }, [movieId]);\n    \n    if (status === loadingStatus.PENDING) {\n        return <Loader loader={Loader} />;\n    }\n\n\n    if (status === loadingStatus.REJECTED) {\n        <h2>{error.message}</h2>;\n    }\n\n    if (status === loadingStatus.RESOLVED) {\n        return (<div>\n            <ul className={styles.CastsList}>\n                {reviews.map(review => (\n                    <li key={review.id} className={styles.CastsItem}>\n                        <h2>author: {review.author}</h2>\n                        <p>content: {review.content}</p>\n                    </li>\n                ))}\n            </ul>\n        \n        </div>\n        );\n    }\n};\nexport default MovieReviews;","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d606ba07975f32ffc0c32900ad602a69\";\nconst BASE_IMG_URL = \"https://image.tmdb.org/t/p/w300\";\n\nexport { BASE_URL, API_KEY, BASE_IMG_URL };","import { BASE_URL, API_KEY } from './ApiBaseUrl';\n\nexport const handleResponseLink = response => {\n    if (response.ok) {\n        return response.json();\n    }\n    console.error('server response: ', response.status);\n    throw new Error('Sorry, something went wrong ...');\n};\nfunction fetchMoviesDay(page) {\n    return fetch(\n        `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false`\n    ).then(handleResponseLink);\n}\n\nfunction fetchMoviesByName(movies, page) {\n    return fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${movies}`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByDetails(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByCredits(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByReviews(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\n\nexport {\n    fetchMoviesByName,\n    fetchMoviesDay,\n    fetchMoviesByDetails,\n    fetchMoviesByCredits,\n    fetchMoviesByReviews,\n};","export const loadingStatus = {\n    IDLE: \"idle\",\n    PENDING: \"pending\",\n    RESOLVED: \"resolved\",\n    REJECTED: \"rejected\",\n};","// extracted by mini-css-extract-plugin\nexport default {\"CastsList\":\"MovieCast_CastsList__f6fQV\",\"CastsItem\":\"MovieCast_CastsItem__9qRim\"};"],"names":["useState","reviews","setReviews","movieId","useParams","error","setError","loadingStatus","status","setStatus","useEffect","fetchMoviesByReviews","then","response","results","length","alert","catch","message","loader","Loader","className","styles","map","review","author","content","id","BASE_URL","API_KEY","BASE_IMG_URL","handleResponseLink","ok","json","console","Error","fetchMoviesDay","page","fetch","fetchMoviesByName","movies","fetchMoviesByDetails","fetchMoviesByCredits","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}