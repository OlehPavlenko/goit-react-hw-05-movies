{"version":3,"file":"static/js/838.688552c1.chunk.js","mappings":"0OAoEA,UA3DsB,WAAO,IAAD,IACxB,GAA0BA,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,IAAU,IAAtBD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAASO,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACNH,EAAUF,EAAAA,EAAAA,UACVM,EAAAA,EAAAA,IAAqBV,GAChBW,MAAK,SAAAb,GACFC,EAASD,GACTQ,EAAUF,EAAAA,EAAAA,SACb,IACAQ,OAAM,SAAAV,GACHC,EAASD,EAAMW,SACfP,EAAUF,EAAAA,EAAAA,SACb,GACR,GAAE,CAACJ,IAGJ,IAAMc,EAAQ,oBAAGP,EAASQ,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAGzC,OAAIX,IAAWD,EAAAA,EAAAA,SACJ,SAAC,IAAD,CAAQa,OAAQC,EAAAA,KAGvBb,IAAWD,EAAAA,EAAAA,UACNF,EAAMW,QAGXR,IAAWD,EAAAA,EAAAA,UAEP,4BACI,gBAAKe,IAAKC,EAAAA,GAAetB,EAAMuB,YAAaC,IAAI,MAChD,wBAAKxB,EAAMyB,SACX,6BAAKzB,EAAM0B,SAAX,QACA,kCAAU1B,EAAM2B,iBAChB,kCAAU3B,EAAM4B,iBAEhB,gBAAIC,UAAWC,EAAAA,EAAAA,IAAf,WAEI,yBACI,SAAC,KAAD,CAAMC,GAAG,OAAOF,UAAWC,EAAAA,EAAAA,KAAab,MAAO,CAAEC,KAAMT,EAASQ,MAAMC,MAAtE,qBAEJ,yBACI,SAAC,KAAD,CAAMa,GAAG,UAAUF,UAAWC,EAAAA,EAAAA,KAAab,MAAO,CAAEC,KAAMT,EAASQ,MAAMC,MAAzE,2BAIR,SAAC,KAAD,KACA,SAAC,KAAD,CAAMa,GAAIf,EAAUa,UAAWC,EAAAA,EAAAA,KAA/B,6BApBZ,EAwBH,C,uGCjED,IAAME,EAAW,+BACXC,EAAU,mCACVX,EAAe,iC,mKCARY,EAAqB,SAAAC,GAC9B,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGpB,MADAC,QAAQlC,MAAM,oBAAqB+B,EAAS5B,QACtC,IAAIgC,MAAM,kCACnB,EACD,SAASC,EAAeC,GACpB,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,qCACgCC,EAAAA,GADhC,gCAC+DQ,EAD/D,yBAEV5B,KAAKqB,EACV,CAED,SAASS,EAAkBC,EAAQH,GAC/B,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,iCAC4BC,EAAAA,GAD5B,gCAC2DQ,EAD3D,sCAC6FG,IACvG/B,KAAKqB,EACV,CACD,SAAStB,EAAqBV,GAC1B,OAAOwC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa9B,EADb,oBACgC+B,EAAAA,GADhC,oBAEVpB,KAAKqB,EACV,CACD,SAASW,EAAqB3C,GAC1B,OAAOwC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa9B,EADb,4BACwC+B,EAAAA,GADxC,oBAEVpB,KAAKqB,EACV,CACD,SAASY,EAAqB5C,GAC1B,OAAOwC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa9B,EADb,4BACwC+B,EAAAA,GADxC,oBAEVpB,KAAKqB,EACV,C,sDClCM,IAAM5B,EAAgB,CACzByC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W","sources":["pages/MovieDetailts.jsx","services/ApiBaseUrl.jsx","services/ApiServices.jsx","services/loadingStatus.jsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMoviesByDetails } from 'services/ApiServices';\nimport { BASE_IMG_URL } from '../services/ApiBaseUrl';\nimport { Loader } from 'components/Loader/Loader';\nimport { loadingStatus } from 'services/loadingStatus';\nimport styles from 'components/Navigation/Navigation.module.css'\n\n\nconst MovieDetailts = () => {\n    const [movie, setMovie] = useState({});\n    const { movieId } = useParams('');\n    const [error, setError] = useState('');\n    const [status, setStatus] = useState(loadingStatus.IDLE);\n    const location = useLocation()\n\n    useEffect(() => {\n        setStatus(loadingStatus.PENDING);\n        fetchMoviesByDetails(movieId)\n            .then(movie => {\n                setMovie(movie);\n                setStatus(loadingStatus.RESOLVED);\n            })\n            .catch(error => {\n                setError(error.message);\n                setStatus(loadingStatus.REJECTED);\n            });\n    }, [movieId]);\n\n\n    const backLink = location.state?.from ?? \"/\"\n\n\n    if (status === loadingStatus.PENDING) {\n        return <Loader loader={Loader} />;\n    }\n\n    if (status === loadingStatus.REJECTED) {\n        <h2>{error.message}</h2>;\n    }\n    \n    if (status === loadingStatus.RESOLVED) {\n        return (\n            <div>\n                <img src={BASE_IMG_URL + movie.poster_path} alt=\"\" />\n                <h2>{movie.title}</h2>\n                <p> {movie.overview} </p>\n                <p>Vote: {movie.vote_average}</p>\n                <p>Data: {movie.release_date}</p>\n        \n                <ul className={styles.nav}>\n        \n                    <li>\n                        <Link to=\"cast\" className={styles.link} state={{ from: location.state.from }}>Cast</Link>\n                    </li>\n                    <li>\n                        <Link to=\"reviews\" className={styles.link} state={{ from: location.state.from }}>Reviews</Link>\n                    </li>\n        \n                </ul>\n                <Outlet />\n                <Link to={backLink} className={styles.link} >Go back</Link>\n            </div>\n        );\n    }\n};\n\n\nexport default MovieDetailts;","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d606ba07975f32ffc0c32900ad602a69\";\nconst BASE_IMG_URL = \"https://image.tmdb.org/t/p/w300\";\n\nexport { BASE_URL, API_KEY, BASE_IMG_URL };","import { BASE_URL, API_KEY } from './ApiBaseUrl';\n\nexport const handleResponseLink = response => {\n    if (response.ok) {\n        return response.json();\n    }\n    console.error('server response: ', response.status);\n    throw new Error('Sorry, something went wrong ...');\n};\nfunction fetchMoviesDay(page) {\n    return fetch(\n        `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false`\n    ).then(handleResponseLink);\n}\n\nfunction fetchMoviesByName(movies, page) {\n    return fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${movies}`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByDetails(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByCredits(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByReviews(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\n\nexport {\n    fetchMoviesByName,\n    fetchMoviesDay,\n    fetchMoviesByDetails,\n    fetchMoviesByCredits,\n    fetchMoviesByReviews,\n};","export const loadingStatus = {\n    IDLE: \"idle\",\n    PENDING: \"pending\",\n    RESOLVED: \"resolved\",\n    REJECTED: \"rejected\",\n};"],"names":["useState","movie","setMovie","movieId","useParams","error","setError","loadingStatus","status","setStatus","location","useLocation","useEffect","fetchMoviesByDetails","then","catch","message","backLink","state","from","loader","Loader","src","BASE_IMG_URL","poster_path","alt","title","overview","vote_average","release_date","className","styles","to","BASE_URL","API_KEY","handleResponseLink","response","ok","json","console","Error","fetchMoviesDay","page","fetch","fetchMoviesByName","movies","fetchMoviesByCredits","fetchMoviesByReviews","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}