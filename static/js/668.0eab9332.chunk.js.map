{"version":3,"file":"static/js/668.0eab9332.chunk.js","mappings":"iOAsDA,UA9CkB,WACd,OAAmCA,EAAAA,EAAAA,UAAS,IAA5C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAYC,EAAAA,EAAAA,IAAU,IAAtBD,QACN,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAASO,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAoBA,OAjBAC,EAAAA,EAAAA,YAAU,WACND,EAAUF,EAAAA,EAAAA,UACVI,EAAAA,EAAAA,IAAqBR,GAChBS,MAAK,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IACVF,MAAK,SAAAX,GACFC,EAAaD,GACbQ,EAAUF,EAAAA,EAAAA,UACNN,EAAWc,OAAS,IACpBN,EAAUF,EAAAA,EAAAA,UACVS,MAAM,wBAEb,IACAC,OAAM,SAAAZ,GACHC,EAASD,EAAMa,SACfT,EAAUF,EAAAA,EAAAA,SACb,GACR,GAAE,CAACJ,IACAK,IAAWD,EAAAA,EAAAA,SACJ,SAAC,IAAD,CAAQY,OAAQC,EAAAA,KAGvBZ,IAAWD,EAAAA,EAAAA,UACNF,EAAMa,QAEXV,IAAWD,EAAAA,EAAAA,UACH,0BACJ,eAAIc,UAAWC,EAAAA,EAAAA,UAAf,SACKrB,EAAWsB,KAAI,SAAAC,GAAS,OACrB,gBAAuBH,UAAWC,EAAAA,EAAAA,UAAlC,WACI,wCAAgBE,EAAUC,cAC1B,gBAAKC,IAAKC,EAAAA,GAAeH,EAAUI,aAAcC,IAAI,MACrD,kCAAUL,EAAUM,UAHfN,EAAUO,GADE,aAHrC,EAcH,C,uGCrDD,IAAMC,EAAW,+BACXC,EAAU,mCACVN,EAAe,iC,mKCARO,EAAqB,SAAAC,GAC9B,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGpB,MADAC,QAAQjC,MAAM,oBAAqB8B,EAAS3B,QACtC,IAAI+B,MAAM,kCACnB,EACD,SAASC,EAAeC,GACpB,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,qCACgCC,EAAAA,GADhC,gCAC+DQ,EAD/D,yBAEV7B,KAAKsB,EACV,CAED,SAASS,EAAkBC,EAAQH,GAC/B,OAAOC,MAAM,GAAD,OACLV,EAAAA,GADK,iCAC4BC,EAAAA,GAD5B,gCAC2DQ,EAD3D,sCAC6FG,IACvGhC,KAAKsB,EACV,CACD,SAASW,EAAqB1C,GAC1B,OAAOuC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa7B,EADb,oBACgC8B,EAAAA,GADhC,oBAEVrB,KAAKsB,EACV,CACD,SAASvB,EAAqBR,GAC1B,OAAOuC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa7B,EADb,4BACwC8B,EAAAA,GADxC,oBAEVrB,KAAKsB,EACV,CACD,SAASY,EAAqB3C,GAC1B,OAAOuC,MAAM,GAAD,OACLV,EAAAA,GADK,kBACa7B,EADb,4BACwC8B,EAAAA,GADxC,oBAEVrB,KAAKsB,EACV,C,sDClCM,IAAM3B,EAAgB,CACzBwC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W,oBCHd,KAAgB,UAAY,6BAA6B,UAAY,6B","sources":["components/MoviesDetails/MovieCast.jsx","services/ApiBaseUrl.jsx","services/ApiServices.jsx","services/loadingStatus.jsx","webpack://react-homework-template/./src/components/MoviesDetails/MovieCast.module.css?6345"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router-dom';\nimport { fetchMoviesByCredits } from 'services/ApiServices';\nimport { BASE_IMG_URL } from 'services/ApiBaseUrl';\nimport { Loader } from 'components/Loader/Loader';\nimport { loadingStatus } from 'services/loadingStatus';\nimport styles from './MovieCast.module.css'\n\nconst MovieCast = () => {\n    const [movieCasts, setMovieCast] = useState([]);\n    let { movieId } = useParams('');\n    const [error, setError] = useState('');\n    const [status, setStatus] = useState(loadingStatus.IDLE);\n    \n\n    useEffect(() => {\n        setStatus(loadingStatus.PENDING);\n        fetchMoviesByCredits(movieId)\n            .then(casts => casts.cast)\n            .then(movieCasts => {\n                setMovieCast(movieCasts);\n                setStatus(loadingStatus.RESOLVED);\n                if (movieCasts.length < 1) {\n                    setStatus(loadingStatus.REJECTED);\n                    alert('There are no cast...')\n                }\n            })\n            .catch(error => {\n                setError(error.message);\n                setStatus(loadingStatus.REJECTED);\n            });\n    }, [movieId]);\n    if (status === loadingStatus.PENDING) {\n        return <Loader loader={Loader} />;\n    }\n\n    if (status === loadingStatus.REJECTED) {\n        <h2>{error.message}</h2>;\n    }\n    if (status === loadingStatus.RESOLVED) {\n        return (<div>\n            <ul className={styles.CastsList}>\n                {movieCasts.map(movieCast => (\n                    <li key={movieCast.id} className={styles.CastsItem}>\n                        <h2>Character: {movieCast.character}</h2>\n                        <img src={BASE_IMG_URL + movieCast.profile_path} alt=\"\" />\n                        <p>Name: {movieCast.name}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n        );\n    }\n};\nexport default MovieCast;","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d606ba07975f32ffc0c32900ad602a69\";\nconst BASE_IMG_URL = \"https://image.tmdb.org/t/p/w300\";\n\nexport { BASE_URL, API_KEY, BASE_IMG_URL };","import { BASE_URL, API_KEY } from './ApiBaseUrl';\n\nexport const handleResponseLink = response => {\n    if (response.ok) {\n        return response.json();\n    }\n    console.error('server response: ', response.status);\n    throw new Error('Sorry, something went wrong ...');\n};\nfunction fetchMoviesDay(page) {\n    return fetch(\n        `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false`\n    ).then(handleResponseLink);\n}\n\nfunction fetchMoviesByName(movies, page) {\n    return fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${movies}`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByDetails(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByCredits(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\nfunction fetchMoviesByReviews(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    ).then(handleResponseLink);\n}\n\nexport {\n    fetchMoviesByName,\n    fetchMoviesDay,\n    fetchMoviesByDetails,\n    fetchMoviesByCredits,\n    fetchMoviesByReviews,\n};","export const loadingStatus = {\n    IDLE: \"idle\",\n    PENDING: \"pending\",\n    RESOLVED: \"resolved\",\n    REJECTED: \"rejected\",\n};","// extracted by mini-css-extract-plugin\nexport default {\"CastsList\":\"MovieCast_CastsList__f6fQV\",\"CastsItem\":\"MovieCast_CastsItem__9qRim\"};"],"names":["useState","movieCasts","setMovieCast","movieId","useParams","error","setError","loadingStatus","status","setStatus","useEffect","fetchMoviesByCredits","then","casts","cast","length","alert","catch","message","loader","Loader","className","styles","map","movieCast","character","src","BASE_IMG_URL","profile_path","alt","name","id","BASE_URL","API_KEY","handleResponseLink","response","ok","json","console","Error","fetchMoviesDay","page","fetch","fetchMoviesByName","movies","fetchMoviesByDetails","fetchMoviesByReviews","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}